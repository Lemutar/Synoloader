

utils.include( utils.baseURL + "../src/modules/Protocol_API.js"); 


function setUp() {
  
}

function tearDown() {
   utils.tearDownHttpServer(4445);
}

function startUp()
{
 
}

function shutDown()
{
}



test_Protocol_task_action_add_fail_100_mock.description = 'test_Protocol_task_action_add_fail_100_mock';
test_Protocol_task_action_add_fail_100_mock.priority    = 'must';
function test_Protocol_task_action_add_fail_100_mock() {

 var server = utils.setUpHttpServer(4445, "../fixtures");


 testee= Protocol('http://localhost:4445',5000,'synoloader_tester','1234');

 addurl_response={};
 var addurl_callback = function(response){addurl_response=response; };
 utils.writeTo("{ \"error\" :{\"code\" : 100},\"success\": false }" , "../fixtures/action.txt" );
 server.expect("/webapi/DownloadStation/task.cgi", 200, '/action.txt'); 
 testee.Connect_Time = Date.now();
 testee.task_action(addurl_callback,'addurl','http://www.ubuntu.com/start-download?distro=desktop&bits=64&release=latest'); 

 utils.wait(50);
 assert.equals(false,addurl_response.success);
 assert.equals("Unknown error",addurl_response.error_text);
}
/*


test_Protocol_connect_fail_401_mock.description = 'test_Protocol_connect_fail_401_mock';
test_Protocol_connect_fail_401_mock.priority    = 'must';
function test_Protocol_connect_fail_401_mock() {

 myresponse={};
 var setdone = function(response){myresponse=response; };
 var server = utils.setUpHttpServer(4445, "../fixtures");
 
 

 mytest= Protocol('http://localhost:4445',5000,'synoloader_tester','1234');
 
 utils.writeTo("{ \"error\" :{\"code\" : 401},\"success\": false }" , "../fixtures/connect.txt" );
 server.expect("/webapi/auth.cgi", 200, '/connect.txt'); 
 mytest.conect(setdone);


 utils.wait(200);
 assert.equals(false,myresponse.success);
 assert.equals("Account disabled",myresponse.error_text);
}

test_Protocol_connect_fail_402_mock.description = 'test_Protocol_connect_fail_402_mock';
test_Protocol_connect_fail_402_mock.priority    = 'must';
function test_Protocol_connect_fail_402_mock() {

 myresponse={};
 var setdone = function(response){myresponse=response; };
 var server = utils.setUpHttpServer(4445, "../fixtures");
 
 

 mytest= Protocol('http://localhost:4445',5000,'synoloader_tester','1234');
 
 utils.writeTo("{ \"error\" :{\"code\" : 402},\"success\": false }" , "../fixtures/connect.txt" );
 server.expect("/webapi/auth.cgi", 200, '/connect.txt'); 
 mytest.conect(setdone);


 utils.wait(200);
 assert.equals(false,myresponse.success);
 assert.equals("Permission denied",myresponse.error_text);
}

test_Protocol_connect_fail_403_mock.description = 'test_Protocol_connect_fail_403_mock';
test_Protocol_connect_fail_403_mock.priority    = 'must';
function test_Protocol_connect_fail_403_mock() {

 myresponse={};
 var setdone = function(response){myresponse=response; };
 var server = utils.setUpHttpServer(4445, "../fixtures");
 
 

 mytest= Protocol('http://localhost:4445',5000,'synoloader_tester','1234');
 
 utils.writeTo("{ \"error\" :{\"code\" : 403},\"success\": false }" , "../fixtures/connect.txt" );
 server.expect("/webapi/auth.cgi", 200, '/connect.txt'); 
 mytest.conect(setdone);


 utils.wait(200);
 assert.equals(false,myresponse.success);
 assert.equals("2-step verification code required",myresponse.error_text);
}

test_Protocol_connect_fail_404_mock.description = 'test_Protocol_connect_fail_404_mock';
test_Protocol_connect_fail_404_mock.priority    = 'must';
function test_Protocol_connect_fail_404_mock() {

 myresponse={};
 var setdone = function(response){myresponse=response; };
 var server = utils.setUpHttpServer(4445, "../fixtures");
 
 

 mytest= Protocol('http://localhost:4445',5000,'synoloader_tester','1234');
 
 utils.writeTo("{ \"error\" :{\"code\" : 404},\"success\": false }" , "../fixtures/connect.txt" );
 server.expect("/webapi/auth.cgi", 200, '/connect.txt'); 
 mytest.conect(setdone);


 utils.wait(200);
 assert.equals(false,myresponse.success);
 assert.equals("Failed to authenticate 2-step verification code",myresponse.error_text);
}
*/
